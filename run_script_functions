#
# Description:
#    Functions for run_script.sh

#
# cleanup on failures
#
trap 'cleanup' 1 2 3 6 9 15   ### Trap these signals in order to do cleanup

cleanup() {
  release_lock
  exit 255              ### Indicate interrupted or killed
}

#
# Log format
#
display_w_timestamp() {
  disptime="`date +'%Y-%m-%d %H:%M:%S'`"

  echo "$disptime $1"

}

#
# test and/or create a lock file
#
ck_n_put_lock() {

  if [ -n "$LOCK" ] ; then
    return
  fi

  if [ ! -d "$APPDIR/locks" ] ; then
    mkdir $APPDIR/locks
  fi

  LOCKFILE=$APPDIR/locks/LCK..$APPNAME   ### lock file name

  runpid=`cat $LOCKFILE 2> /dev/null`      ### Get process ID
  if [ -n "$runpid" ] ; then               
    psrunpid=`ps -p$runpid | grep $runpid` ### Is it really running?
    if [ -n "$psrunpid" ] ; then
      display_w_timestamp "Lock file exists: $psrunpid "
      exit 0
    fi
  fi
  echo "$$" > $LOCKFILE  ### Create a new lock file
}


#
# Remove the lock.
#
release_lock() {
  if [ -n "$LOCK" ] ; then
    return
  fi

  LOCKFILE=$APPDIR/locks/LCK..$APPNAME
  rm $LOCKFILE          ### remove lock file
}


#
# Run the script.
#

do_run_script() {

  ck_n_put_lock

  if [ -n "$DEBUG" ] ; then
    sh -x $EXEC
  else
    $EXEC
  fi

  release_lock 
}


#
# Send email notices.
#

send_notices() {
  if [ -n "$EMAIL" ] ; then
    return
  fi

  echo "To: $EMAIL_TO
Reply-to: $EMAIL_REPLYTO
From: $EMAIL_FROM
Subject: $EMAIL_SUBJECT

$@ started at $STARTDATE
$@ ended at $ENDDATE

" > $APPTMP/$progname.txt

## Grab end of log file
if [ -f $APPHOME/logs/$progname.log ] ; then
  tail -50 $APPHOME/logs/$progname.log >> $APPTMP/$progname.txt
fi

## Grab error 
if [ -f $APPTMP/$progname.err ] ; then
  cat $APPTMP/$progname.err >> $APPTMP/$progname.txt
  rm -f $APPTMP/$progname.err
fi

cat $APPTMP/$progname.txt | $SENDMAIL

}


